---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: kube-prometheus-stack
  namespace: system-monitoring
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 77.0.0
  url: oci://ghcr.io/prometheus-community/charts/kube-prometheus-stack

---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack

  install:
    crds: Skip
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      strategy: rollback
      retries: 3

  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph

  values:
    crds:
      enabled: false
    cleanPrometheusOperatorObjectNames: true

    ###
    ### Component values
    ###
    alertmanager:
      enabled: false

    kubeApiServer:
      enabled: true
      endpoints: ["192.168.1.9", "192.168.4.9", "192.168.4.10"]
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket|apiserver_request_total)
          - action: drop
            sourceLabels: ["__name__"]
            regex: code_verb:apiserver_request_total:increase1h[30d]
          - action: drop
            sourceLabels: ["__name__"]
            regex: '.*apiserver_request_total.*'

    kubeControllerManager:
      enabled: true
      endpoints: ["192.168.1.9", "192.168.4.9", "192.168.4.10"]

    kubeEtcd:
      enabled: true
      endpoints: ["192.168.1.9", "192.168.4.9", "192.168.4.10"]

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            sourceLabels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

    kubeProxy:
      enabled: false

    kubeScheduler:
      enabled: true
      endpoints: ["192.168.1.9", "192.168.4.9", "192.168.4.10"]

    kubeStateMetrics:
      enabled: false

    nodeExporter:
      enabled: false

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Kubernetes

    ###
    ### Prometheus operator values
    ###
    prometheusOperator:
      resources:
        requests:
          cpu: 35m
          memory: 273M
        limits:
          memory: 326M

      prometheusConfigReloader:
        # resource config for prometheusConfigReloader
        resources:
          requests:
            cpu: 5m
            memory: 32M
          limits:
            memory: 32M

    ###
    ### Prometheus instance values
    ###
    prometheus:
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/appName: "Prometheus"
          hajimari.io/icon: simple-icons:prometheus
          hajimari.io/group: "monitoring"
          hajimari.io/instance: "admin"
        hosts:
          - &host prometheus.${SECRET_DOMAIN}
        pathType: Prefix

      prometheusSpec:
        image:
          registry: docker.io
          repository: prompp/prompp
          tag: 2.53.2-0.3.3
        securityContext:
          runAsNonRoot: true
          runAsUser: 64535
          runAsGroup: 64535
          fsGroup: 64535
        alertingEndpoints:
          - namespace: monitoring
            name: alertmanager
            port: 9093
            apiVersion: v2
        enableAdminAPI: true
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        replicas: 2
        replicaExternalLabelName: "__replica__" # must match with thanos value `.query.replicaLabel[0]`
        resources:
          requests:
            cpu: 100m
            memory: 4.2G
          limits:
            memory: 4.2G
        retention: 14d
        retentionSize: 50GB
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        scrapeInterval: 1m # Must match interval in Grafana Helm chart
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 100Gi
        walCompression: true
